// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	entities "energia/entities"

	mock "github.com/stretchr/testify/mock"
)

// WeatherRepoInterface is an autogenerated mock type for the WeatherRepoInterface type
type WeatherRepoInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *WeatherRepoInterface) Create(_a0 entities.Weather) (entities.Weather, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entities.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Weather) (entities.Weather, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entities.Weather) entities.Weather); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.Weather)
	}

	if rf, ok := ret.Get(1).(func(entities.Weather) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: city
func (_m *WeatherRepoInterface) FindAll(city string) ([]entities.Weather, error) {
	ret := _m.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entities.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entities.Weather, error)); ok {
		return rf(city)
	}
	if rf, ok := ret.Get(0).(func(string) []entities.Weather); ok {
		r0 = rf(city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Weather)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeatherRepoInterface creates a new instance of WeatherRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherRepoInterface {
	mock := &WeatherRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
