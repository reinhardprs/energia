// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	entities "energia/entities"

	mock "github.com/stretchr/testify/mock"
)

// UserUsageRepoInterface is an autogenerated mock type for the UserUsageRepoInterface type
type UserUsageRepoInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: userUsage
func (_m *UserUsageRepoInterface) Create(userUsage entities.UserUsage) (entities.UserUsage, error) {
	ret := _m.Called(userUsage)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entities.UserUsage
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.UserUsage) (entities.UserUsage, error)); ok {
		return rf(userUsage)
	}
	if rf, ok := ret.Get(0).(func(entities.UserUsage) entities.UserUsage); ok {
		r0 = rf(userUsage)
	} else {
		r0 = ret.Get(0).(entities.UserUsage)
	}

	if rf, ok := ret.Get(1).(func(entities.UserUsage) error); ok {
		r1 = rf(userUsage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: userID
func (_m *UserUsageRepoInterface) FindAll(userID int) ([]entities.UserUsage, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entities.UserUsage
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]entities.UserUsage, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []entities.UserUsage); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UserUsage)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUsageRepoInterface creates a new instance of UserUsageRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsageRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsageRepoInterface {
	mock := &UserUsageRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
