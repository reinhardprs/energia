// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	entities "energia/entities"

	mock "github.com/stretchr/testify/mock"
)

// DeviceInterface is an autogenerated mock type for the DeviceInterface type
type DeviceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: userID, _a1
func (_m *DeviceInterface) Create(userID int, _a1 entities.Device) (entities.Device, error) {
	ret := _m.Called(userID, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entities.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(int, entities.Device) (entities.Device, error)); ok {
		return rf(userID, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, entities.Device) entities.Device); ok {
		r0 = rf(userID, _a1)
	} else {
		r0 = ret.Get(0).(entities.Device)
	}

	if rf, ok := ret.Get(1).(func(int, entities.Device) error); ok {
		r1 = rf(userID, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID, deviceID
func (_m *DeviceInterface) Delete(userID int, deviceID int) error {
	ret := _m.Called(userID, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, deviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: userID
func (_m *DeviceInterface) FindAll(userID int) ([]entities.Device, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entities.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]entities.Device, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []entities.Device); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: userID, deviceID
func (_m *DeviceInterface) FindByID(userID int, deviceID int) (entities.Device, error) {
	ret := _m.Called(userID, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entities.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (entities.Device, error)); ok {
		return rf(userID, deviceID)
	}
	if rf, ok := ret.Get(0).(func(int, int) entities.Device); ok {
		r0 = rf(userID, deviceID)
	} else {
		r0 = ret.Get(0).(entities.Device)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, _a1
func (_m *DeviceInterface) Update(userID int, _a1 entities.Device) (entities.Device, error) {
	ret := _m.Called(userID, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entities.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(int, entities.Device) (entities.Device, error)); ok {
		return rf(userID, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, entities.Device) entities.Device); ok {
		r0 = rf(userID, _a1)
	} else {
		r0 = ret.Get(0).(entities.Device)
	}

	if rf, ok := ret.Get(1).(func(int, entities.Device) error); ok {
		r1 = rf(userID, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDeviceInterface creates a new instance of DeviceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceInterface {
	mock := &DeviceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
