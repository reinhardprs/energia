// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	entities "energia/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UserUsageInterface is an autogenerated mock type for the UserUsageInterface type
type UserUsageInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: userID, date
func (_m *UserUsageInterface) Create(userID int, date time.Time) (entities.UserUsage, error) {
	ret := _m.Called(userID, date)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entities.UserUsage
	var r1 error
	if rf, ok := ret.Get(0).(func(int, time.Time) (entities.UserUsage, error)); ok {
		return rf(userID, date)
	}
	if rf, ok := ret.Get(0).(func(int, time.Time) entities.UserUsage); ok {
		r0 = rf(userID, date)
	} else {
		r0 = ret.Get(0).(entities.UserUsage)
	}

	if rf, ok := ret.Get(1).(func(int, time.Time) error); ok {
		r1 = rf(userID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserUsage provides a mock function with given fields: userID
func (_m *UserUsageInterface) GetUserUsage(userID int) ([]entities.UserUsage, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserUsage")
	}

	var r0 []entities.UserUsage
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]entities.UserUsage, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []entities.UserUsage); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UserUsage)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUsageInterface creates a new instance of UserUsageInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsageInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsageInterface {
	mock := &UserUsageInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
